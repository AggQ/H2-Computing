class Node:  # Node, always have [1m]
    # attributes
    def __init__(self, ID, data):
        # attributes
        self.ID = ID
        self.data = data  # same
        self.next = None  # same

    # methods
    def getData(self):
        return self.data

    def setData(self, data):
        self.Data = data

    def getNext(self):
        return self.next

    def setNext(self, Next):
        self.next = Next

    def display(self):
        print(self.next, self.data)


class LinkedList:  # Ordered Linked List
    # attributes
    def __init__(self):
        # attributes
        self.head = None  # same

    # methods
    def getHead(self):
        return self.head

    def setHead(self, head):
        self.head = head

    def isEmpty(self):
        return self.head is None

    def orderedInsert(self, ID, data):  # change to ID/Data for insertion (can be numberic or alphabetic)
        newNode = Node(ID, data)  # Create a new node with given data, the point of the node is to store other data
        if self.isEmpty():  # If empty
            self.head = newNode  # Insert the new node as head
        elif self.head.data > data:  # If the data of the head node is greater than the new data
            newNode.next = self.head  # Point the new node to the current head
            self.head = newNode  # Update the head to the new node
        else:
            current = self.head  # Start traversal from the head
            while current.next and current.next.data < data:  # Find indert position
                current = current.next  # Move to the next node (self.head.next)

            newNode.next = current.next  # Insert the new node between current and current.next or at the end of the linked list if current.next is None
            current.next = newNode

    def deleteNode(self, data):
        if self.isEmpty():  # if LL is empty
            print("Linked List is empty! Node deletion fails")
            return
        previous = None  # Not empty
        current = self.head
        while True:  # Find the Node
            if current is None:  # Node is not found in LL
                print("Node is not found. Deletion not performed")
                return
            if current.data == data:  # Node is found in LL
                break

            previous = current  # move previous and current forward by 1 node
            current = current.next

        if previous is None:  # case 1: Node deleted is first node
            self.head = current.next
        else:  # case 2: Node deleted is intermediate or last node
            previous.next = current.next

    def traverse(self):
        outputList = []
        current = self.head
        if self.isEmpty():
            return "There are no items in this LL"

        while current is not None:
            outputList.append(current.data)
            current = current.next
        print(outputList)
        return outputList

    def display(self):
        current = self.head
        index = 0
        print("Index:\tID:\t\t Item:")
        while current:
            print(index, '\t   ', current.ID, '\t', current.data)
            current = current.next
            index += 1


# 2022 JPJC JC 1 EOY Paper 2, compare with linked_list2
linked_list = LinkedList()
linked_list.orderedInsert(2556, "Apple")
linked_list.orderedInsert(3442, "Banana")
linked_list.orderedInsert(5445, "Cherry")
linked_list.display()
