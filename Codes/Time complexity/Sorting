#bubble sort
def bubble_sort(lst):
    for _ in range(len(lst) - 1):
        for i in range(len(lst) - 1):
            if lst[i] > lst[i + 1]: # right < left
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
    return lst

#insertion sort
def insertion_sort(lst):
    for i in range(1, len(lst)):
        temp = lst[i]
        j = i - 1
        while temp < lst[j] and j >= 0: # when temp < left, move left
            lst[j + 1] = lst[j]
            j -= 1
        lst[j + 1] = temp
    return lst

#quick sort
def quick_sort(lst):
    if len(lst) <= 1: # base case
        return lst
    else: # general procedure
        pivot = lst[0]
        lower, higher = [], []
        for item in lst[1:]:
            if item < pivot:
                lower.append(item)
            else:
                higher.append(item)
        return quick_sort(lower) + [pivot] + quick_sort(higher)

#merge sort
def merge_sort(lst):
    def merge(left, right): # merge left and right
        result = []
        while left and right:
            if left[0] < right[0]:
                result.append(left.pop(0))
            else:
                result.append(right.pop(0))
        return result + left + right

    if len(lst) <= 1: # base case
        return lst
    else: # general procedure
        mid = len(lst) // 2
        left = merge_sort(lst[:mid])
        right = merge_sort(lst[mid:])
        return merge(left, right)
