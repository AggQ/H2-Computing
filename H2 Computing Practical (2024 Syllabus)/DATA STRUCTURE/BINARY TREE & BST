# BINARY TREE
class Node:
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data


class BinaryTree:
    def __init__(self):
        self.root = None

    def insert(self, data):
        if self.root is None:
            self.root = Node(data)  # Set new node as root if tree is empty
            return

        q = [self.root]             # Initialize queue with root

        while q:
            curr = q[0]  # Get front node of queue
            curr = q.pop(0)  # Remove front node from queue
            if curr.left is None:
                curr.left = Node(data)  # Insert new node as left child if left child is empty
                break
            elif curr.right is None:
                curr.right = Node(data)  # Insert new node as right child if right child is empty
                break
            else:
                q.append(curr.left)     # Add left child to queue if left child is present
                q.append(curr.right)    # Add right child to queue if right child is present

    def traverse(self):
        if self.root is None:
            return

        q = [self.root]             # Initialize queue with root

        while q:
            curr = q.pop(0)         # Get front node of queue and remove it
            print(curr.data)        # Print data of current node
            if curr.left:
                q.append(curr.left)     # # Add left child to queue if there is left child, repeats until inserted
            if curr.right:
                q.append(curr.right)    # Add right child to queue if  there is right child

T = BinaryTree()

name = 'Jotaro'
LevelOrder = list(name)
for i in LevelOrder:
    T.insert(i)
T.traverse()

print(T.root.data)
print(T.root.left.data)
print(T.root.right.data)


# BINARY SEARCH TREE
class Node:
    def __init__(self, ID, data):  # public
        self.ID = ID
        self.Data = data
        self.Left = None  # Node
        self.Right = None  # Node


class BST:
    def __init__(self):  # Constructor
        self.Root = None  # Node

    def AddNode(self, ID, data):  # change to ID or Data (can be both numeric or alphabetic)
        newNode = Node(ID, data)

        if self.Root is None:  # If the tree is empty
            self.Root = newNode
        else:
            curr = self.Root

            while True:
                if curr.ID > newNode.ID:  # root has higher value
                    if curr.Left is None:  # Insert as left child
                        curr.Left = newNode
                        break
                    else:
                        curr = curr.Left  # Traverse to next left subtree
                else:
                    if curr.Right is None:
                        curr.Right = newNode  # Insert as right child if right child is None
                        break
                    else:
                        curr = curr.Right  # Traverse to next right subtree

    def Display(self):
        print('ID:\tData:')

        def DisplayHelper(node):
            if node.Left is not None:
                DisplayHelper(node.Left)  # Recursively display left subtree
            print(str(node.ID) + '\t' + node.Data)  # Print ID and data
            if node.Right is not None:
                DisplayHelper(node.Right)  # Recursively display right subtree

        DisplayHelper(self.Root)  # Call helper function to start traversal

    def Search(self, ID):
        def SearchHelper(node, ID):
            if node is None:
                return False
            elif node.ID == ID:
                return True

            if ID > node.ID:
                return SearchHelper(node.Right, ID)
            return SearchHelper(node.Left, ID)

        return SearchHelper(self.Root, ID)

    def Height(self):
        def HeightHelper(node):
            if node is None:
                return 0
            else:
                left_height = HeightHelper(node.Left)
                right_height = HeightHelper(node.Right)
                return max(left_height, right_height) + 1  # returns larger number + 1

        return HeightHelper(self.Root)

    def PreOrderTraversal(self):
        def PreOrderHelper(node):
            if node:
                print(str(node.ID) + '\t' + node.Data)  # Pre (root first)
                PreOrderHelper(node.Left)
                PreOrderHelper(node.Right)

        PreOrderHelper(self.Root)

    def InOrderTraversal(self):
        def InOrderHelper(node):
            if node:
                InOrderHelper(node.Left)
                print(str(node.ID) + '\t' + node.Data)  # In (root second)
                InOrderHelper(node.Right)

        InOrderHelper(self.Root)

    def PostOrderTraversal(self):
        def PostOrderHelper(node):
            if node:
                PostOrderHelper(node.Left)
                PostOrderHelper(node.Right)
                print(str(node.ID) + '\t' + node.Data)  # Post (root third)

        PostOrderHelper(self.Root)



# Test cases
bst = BST()

bst.AddNode(2334, "Apple")
bst.AddNode(4556, "Banana")
bst.AddNode(6551, "Cherry")
bst.AddNode(7884, "Book 3")
print(bst.Height())
print(bst.Search(4556))

#bst.Display()  # change ISBN to ID and title to Data in Node and BST

print("In-order Traversal:")
bst.InOrderTraversal()


# FREE SPACE BINARY SEARCH TREE
class FreeSpaceBinarySearchTree:
    def __init__(self, size):
        # Initialize arrays for data, left and right pointers, and free list pointers
        self.data = [None] * size  # Array to store data at each node
        self.left = [-1] * size    # Array to store left child pointers
        self.right = [-1] * size   # Array to store right child pointers
        self.pointer = [i for i in range(1, size)] + [-1]  # Free list to manage available slots
        self.root = -1             # Pointer to the root node
        self.next_free = 0         # Pointer to the next free slot in the free list

    def insert(self, data):
        # Insert data into the tree
        if self.next_free == -1:
            print(f"Binary search tree is full! Data not entered: {data}")
        elif self.root == -1:
            # If tree is empty, insert at root
            self.data[self.next_free] = data
            self.pointer[self.next_free], self.root, self.next_free = -1, self.next_free, self.pointer[self.next_free]
        else:
            # Traverse the tree to find the correct position to insert
            curr_pointer = self.root
            while curr_pointer != -1:
                if data < self.data[curr_pointer]:
                    if self.left[curr_pointer] == -1:
                        # Insert as left child
                        self.data[self.next_free] = data
                        self.pointer[self.next_free], self.left[curr_pointer], self.next_free = -1, self.next_free, self.pointer[self.next_free]
                        curr_pointer = -1
                    else:
                        curr_pointer = self.left[curr_pointer]
                else:
                    if self.right[curr_pointer] == -1:
                        # Insert as right child
                        self.data[self.next_free] = data
                        self.pointer[self.next_free], self.right[curr_pointer], self.next_free = -1, self.next_free, self.pointer[self.next_free]
                        curr_pointer = -1
                    else:
                        curr_pointer = self.right[curr_pointer]

    def search(self, data):
        # Search for data in the tree
        curr_pointer = self.root
        while curr_pointer != -1 and data != self.data[curr_pointer]:
            if data < self.data[curr_pointer]:
                curr_pointer = self.left[curr_pointer]
            else:
                curr_pointer = self.right[curr_pointer]
        return data == self.data[curr_pointer]  # Return True if found, False otherwise

    def height(self):
        # Calculate the height of the tree
        def helper(curr_pointer):
            if curr_pointer == -1:
                return -1
            else:
                return 1 + max(helper(self.left[curr_pointer]), helper(self.right[curr_pointer]))
        return helper(self.root)

    def inorder_traversal(self):
        # Perform inorder traversal (left, root, right) and return nodes in a list
        def helper(curr_pointer):
            if curr_pointer == -1:
                return []
            else:
                return helper(self.left[curr_pointer]) + [self.data[curr_pointer]] + helper(self.right[curr_pointer])
        return helper(self.root)

    def preorder_traversal(self):
        # Perform preorder traversal (root, left, right) and return nodes in a list
        def helper(curr_pointer):
            if curr_pointer == -1:
                return []
            else:
                return [self.data[curr_pointer]] + helper(self.left[curr_pointer]) + helper(self.right[curr_pointer])
        return helper(self.root)

    def postorder_traversal(self):
        # Perform postorder traversal (left, right, root) and return nodes in a list
        def helper(curr_pointer):
            if curr_pointer == -1:
                return []
            else:
                return helper(self.left[curr_pointer]) + helper(self.right[curr_pointer]) + [self.data[curr_pointer]]
        return helper(self.root)

# Example usage:
lst = [5, 3, 7, 2, 4, 6, 8]
free_space_binary_search_tree = FreeSpaceBinarySearchTree(len(lst))

# Insert elements into the tree
for item in lst:
    free_space_binary_search_tree.insert(item)

# Perform operations on the tree
print(f"Search for 0:", free_space_binary_search_tree.search(0))
print("Height: ", free_space_binary_search_tree.height())
print("Inorder:", free_space_binary_search_tree.inorder_traversal())
